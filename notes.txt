
/*
    * switch pathIndex to map 
*/

----------Data Store Notes----------
DataStoreTypeRegistry
 - list of DataStore types that are initialized with the plugin manager

DataStore struct
 - Session==preferred abstraction for datastore
   - for example FileDataStore for a S3DataStore

 - StoreReader interface
     Get(path string, datapath string) (io.ReadCloser, error)

 - StoreWriter interface 
	    Put(srcReader io.Reader, destPath string, destDataPath string) (int, error)



 - ConnectionDataStore: interface for DataStores that must initialize and external connection
   - Connect(ds DataStore) (any, error)
   - RawSession() any  //filesapi.FileStore for an S3 instance

-----------------------------------

Payload
  - IOManager
  - Actions []Action

Action
  - IOManager
  - Type string
  - Description string


IOManager
  - Methods
   - GetDataSource(GetDsInput) (DataSource,error)
   - GetInputDataSource
   - GetOutputDataSource
   - GetReader(dataSourceName,pathName,dataPathName) reader 
   - Get(dataSourceName, pathName, dataPathName) []bytes
   - Put(bytes,dataSourceName,pathName,ouputDataPathName)
   //- Write(reader,dataSourceName, pathName, dataPathName)
   - Copy
   - CopyFileToLocal(srcDataSourceName,pathkey,localpath)
   - CopyFileToRemote(localPath, destDataSource, pathkey)
   - GetStore(name)

 - Attributes
   - Attributes
   - Stores
   - Inputs
   - Outputs

//utility
GetStoreAs[storeInterface](DataStores, name)


PluginManager
  - initialize
    - set log format for each language
  - SendMessage(message SendMessageInput) (SendMessageOutput,error)
  - WriteToEventStore(EventStoreInput input) OnErrorResumeNext
    - scalars, arrays (matrix), compound data types, key/value 


  //EventStoreMethods
    - Put
    - Get

onInit:
 - Log ComputeID, EventID, ManifestId
 - Log PayloadID

{cc-log} {date} {time} {log-type} {log}
{cc-log} {date} {time} {log-type} {log}

 - log-types
      INFO
      ACTION
  

pm.GetFileByName(name,path)   ([]byte,error)
pm.FileReaderbyName(name,path) (reader,error)

should we have DataSource functions in addition to DataStore functions?
should they just be pass through?




Notes for Will:
  - ccstore interface????
      PutObject(input PutObjectInput) error
	  PullObject(input PullObjectInput) error
	  GetObject(input GetObjectInput) ([]byte, error)
	  GetPayload() (Payload, error)
	  SetPayload(p Payload) error
	  RootPath() string
	  HandlesDataStoreType(datasourcetype StoreType) bool
  - error.go //why replace native error types?
  - logger.go //Will wrap golang logger for implementation.  Am going to rewrite and use log vs printf
  - status.go?
    - think this gets removed.  Status is fuction of cloud dompute and I cazn't come up with a good reason to have this.
    - internal progress is a function of Logging/Messaging
  
